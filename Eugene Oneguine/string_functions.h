/*!
 * puts пишет строку s и символ новой строки в stdout.
 * Возвращает EOF в случае ошибки, или неотрицательное
 * значение, если запись прошла нормально.
 * 
 * \param[in] s Строка для печати
 * 
 * \return EOF при ошибке и 1 в случае успеха
 */
int puts_my (const char *s);

/*! Возвращает длину cs
 * 
 * \param[in] cs Рассматриваемая строка
 * 
 * \return Длина строки cs
 */
size_t strlen_my (const char *cs);

/*!
 * возвращает указатель на первое вхождение с в cs
 * или, если такового не оказалось, NULL
 * 
 * \param[in] cs Рассматриваемый текст
 * \param[in] c Искомый символ
 * 
 * \return Указатель на первое вхождение c в cs (NULL при отсутствииы)
 */
char *strchr_my (const char *cs, int c);

/*! копирует строку ct в строку s, включая '\0'; возвращает s
 * 
 * \param[out] s Принимающий массив
 * \param[in] ct Копируемая строка
 * 
 * \return s
 */
char *strcpy_my (char *s, const char *ct);

/*!
 * копирует не более n символов строки ct в s;
 * возвращает s. Дополняет результат символами 
 * '\0', если символов в ct меньше n
 * 
 * \param[out] s Принимающий массив
 * \param[in] ct Копируемая строка
 * \param[in] n Максимальное количество символов для копирования
 * 
 * \return s
 */
char *strncpy_my (char *s, const char *ct, size_t n);

/*! приписывает ct к s; возвращает s
 * 
 * \param[in] s Дополняемая строка
 * \param[in] ct Копируемая строка
 * 
 * \return s
 */
char *strcat_my (char *s, const char *ct);

/*!
 * приписывает не более n символов ct к s,
 * завершая s символом '\0';
 * возвращает s
 * 
 * \param[out] s Принимающая строка
 * \param[in] ct Копируемая строка
 * \param[in] n Макс. кол-во копируемых символов
 * 
 * \return s
 */
char *strncat_my (char *s, const char *ct, size_t n);

/*!
 * fgets читает не более n-1 символов в
 * массив s, прекращая чтение, если встре-
 * тился символ новой строки, который вклю-
 * чается в массив; кроме того, записывает 
 * в массив '\0'. Функция fgets возвращает
 * s или, если исчерпан файл или обнаружена
 * ошибка, NULL.
 * 
 * \param[out] s Массив для размещения символов
 * \param[in] n Максимальное количество считанных символов
 * \param[in] stream Поток данных
 * 
 * \return s при удаче и NULL при ошибке
 */
char *fgets_my (char *s, int n, FILE *stream);

/*!
 * Функция strdup() путем обращения к функции
 * malloc() выделяет память, достаточную для 
 * хранения дубликата строки, на которую указывает
 * str, а затем производит копирование этой строки
 * в выделенную область и возвращает указатель на нее.
 * 
 * \param[in] str указатель на копируемую строку
 * 
 * \return указатель на копию строки
 */
char *strdup_my (const char *str);

/*!
 * извлекает данные из входного потока до строкового
 * разделителя, который не записывается в получившийся
 * массив данных.
 * 
 * \param[in] stream Входной поток
 * \param[out] string Массив, в который записываются считанные данные
 * \param[in] streamsize Максимальное количество считанных символов
 * \param[in] separator Символ-разделитель, до которого происходит считывание
 * 
 * \return количество считанных символов
 */
ssize_t getline_my (char **lineptr, size_t *n, FILE *stream); 
